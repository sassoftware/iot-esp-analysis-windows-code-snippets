<project name='project' pubsub='auto' threads='1' use-tagged-token='true'>
  <description>
    This project demonstrates the use of the learning algorithm for
    the online K-means clustering in ESP. It has a insert only input stream consisting of:
    1. an id that acts as the streams key
    2. an x coordinate of data
    3. a y coordinate of data

    This project has a single continuous query with a source window that
    receives the data to be scored, a train window that generates
    and periodically updates the k-means model, and lastly a score
    window that does the scoring.

    The model is controlled by the parameters specified in the
    w_training train window. While the w_training train
    window is fully parameterized, this example's use of it tries to find
    which of two clusters the data points are closest to.
  </description>
  <contqueries>
    <contquery name='contquery' trace='w_scoring w_training'>
      <windows>
        <window-source name='w_source' insert-only='true'>
          <description>
            Source window with file socket connector to publish provided
            example data.
          </description>
          <schema>
            <fields>
              <field name='id'  type='int64' key='true'/>
              <field name='x_c' type='double'/>
              <field name='y_c' type='double'/>
            </fields>
          </schema>
          <connectors>
            <connector class='fs' name='publisher'>
              <properties>
                <property name='type'>pub</property>
                <property name='fstype'>csv</property>
                <property name='fsname'>input.csv</property>
                <property name='transactional'>true</property>
                <property name='blocksize'>1</property>
              </properties>
            </connector>
          </connectors>
        </window-source>

        <window-train name='w_training' algorithm='KMEANS'>
          <description>
            This train window looks at all observations and periodically generates
            a new clustering model using the k-means algorithm.  The model_id indicates
            what version of the model is being output. The first version of the model
            will tag all events with a "1".  The model_address indicates the cluster number.

            The following  properties govern the k-means algorithm:
            nClusters: specifies the number of clusters K (K>0) to report
            initSeed: specifies the random seed used during initialization when each points is assigned to a random cluster
            dampingFactor: specifies the damping factor \alpha (0\le\alpha\le1) for old data points. Assuming the current time is T, data points arriving at time T would have weight 1, while data points arriving at time T-t would have weight \alpha^t.
            fadeOutFactor: specifies the factor \theta (0 &lt; \theta &lt; 1) for determining whether an existing cluster is fading out. If a cluster weight is smaller than the maximal cluster weight among other clusters multiplied by \theta, then this cluster is considered to be fading out.
            disturbFactor: specifies the factor \delta (\delta >0) for the disturbance when splitting a cluster. When an old cluster is fading out, the cluster with maximal weight will be split into two, and either new clusters will share half of its weight. Assuming the old centroid is \vec{c}, the two new centroids will be (1+\delta)\cdot\vec{c} and (1-\delta)\cdot\vec{c}, respectively.
            nInit: specifies the number of data events used during initialization
            velocity: specifies the number of events arriving at a single timestamp
            commitInterval: specifies the number of timestamps to be elapsed before triggering a commit of model to downstream scoring.
            inputs: specifies the list of variable names used in clustering. Variable names are defined in the input schema, and they are separated by comma in the list, e.g. x,y .
          </description>
          <parameters>
            <properties>

              <property name="nClusters">2</property>
              <property name="initSeed">1</property>
              <property name="dampingFactor">0.8</property>
              <property name="fadeOutFactor">0.05</property>
              <property name="disturbFactor">0.01</property>

              <property name="nInit">50</property>
              <property name="velocity">5</property>
              <property name="commitInterval">25</property>
            </properties>
          </parameters>
          <input-map>
            <properties>
              <property name="inputs">x_c,y_c</property>
            </properties>
          </input-map>
        </window-train>

        <window-score name='w_scoring'>
          <description>
            This window scores the incoming event. In k-means clustering
            that means augmenting the input event with a cluster number
            that indicates the cluster that the observation falls into.
            The properties unique for streaming k-means:
            • labelOut: specifies the column/field name in the
            • minDistanceOut: specifies the column/field name in
            the output schema that stores the distance to the nearest
            cluster. If not specified, the minimal distance column
            will not be shown output schema that stores cluster label.
            • modelIdOut: specifies the column/field name in the
            output schema that stores the ID of the model from which
            the score is computed. If not specified, the model ID
            column will not be shown.

          </description>
          <schema>
            <fields>
              <field name='id'  type='int64' key='true'/>
              <field name='x_c' type='double'/>
              <field name='y_c' type='double'/>
              <field name='seg' type='int32'/>
              <field name='min_dist' type='double'/>
              <field name='model_id' type='int64'/>
            </fields>
          </schema>
          <models>
            <online algorithm='KMEANS'>
              <input-map>
                <properties>
                  <property name="inputs">x_c,y_c</property>
                </properties>
              </input-map>
              <output-map>
                <properties>
                  <property name="labelOut">seg</property>
                  <property name='minDistanceOut'>min_dist</property>
                  <property name='modelIdOut'>model_id</property>
                </properties>
              </output-map>
            </online>
          </models> 
          <connectors> 
            <connector class='fs' name='subscriber'> 
              <properties> 
                <property name='type'>sub</property> 
                <property name='fstype'>csv</property> 
                <property name='fsname'>result.out</property> 
                <property name='snapshot'>true</property> 
                <property name='header'>true</property> 
              </properties> 
            </connector> 
          </connectors>
        </window-score>
      </windows>
      <edges>
        <edge source='w_source' target='w_training' role='data'/>
        <edge source='w_source' target='w_scoring' role='data'/>
        <edge source='w_training' target='w_scoring' role='model'/>
      </edges>
    </contquery>
  </contqueries>
</project>
